import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
    }
}
apply plugin: 'android'

android {
    compileSdkVersion 'android-29'
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 26
        setProperty("archivesBaseName", "sbfs-trainer")
    }

    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword TRAINER_SIGNING_PASSWORD
            keyAlias "android-release-key"
            keyPassword TRAINER_SIGNING_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}

dependencies {
}

repositories {
    mavenCentral()
    maven {
        url "https://mvnrepository.com/artifact/us.bpsm/edn-java"
    }
    maven {
        url "https://maven.google.com"
    }
}

static def buildNumber() {
    def build = System.getenv("TRAVIS_BUILD_NUMBER")
    if (build == null || build.isEmpty())
        build = 1
    return build
}

task('increaseVersionCode') {
    doLast {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        def versionCode = buildNumber() + 100
        def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
        manifestFile.write(manifestContent)
    }
}

task('incrementVersionName') {
    doLast {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        matcherVersionNumber.find()
        def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
        def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
        def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
        def buildVersion = buildNumber()
        def mNextVersionName = majorVersion + "." + minorVersion + "." + pointVersion + "." + (buildVersion + 1)
        def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
        manifestFile.write(manifestContent)
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig' || task.name == 'generateDebugBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}
